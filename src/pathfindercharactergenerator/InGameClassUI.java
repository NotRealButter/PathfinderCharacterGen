/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pathfindercharactergenerator;

/**
 *
 * @author Stephen
 */
public class InGameClassUI extends javax.swing.JPanel {

    /**
     * Creates new form InGameClassUI
     */
    
    private int classChosen = 0;
    public InGameClassUI()
    {
        initComponents();
    }

    /**
     *
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        classButtonGroup = new javax.swing.ButtonGroup();
        label1 = new java.awt.Label();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        selectBarbarian = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jRadioButton9 = new javax.swing.JRadioButton();
        jRadioButton10 = new javax.swing.JRadioButton();
        jRadioButton11 = new javax.swing.JRadioButton();
        jRadioButton12 = new javax.swing.JRadioButton();
        jRadioButton13 = new javax.swing.JRadioButton();
        jRadioButton14 = new javax.swing.JRadioButton();
        jRadioButton15 = new javax.swing.JRadioButton();

        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));

        label1.setText("picture here");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        selectBarbarian.setText("jRadioButton1");

        jRadioButton2.setText("jRadioButton2");

        jRadioButton3.setText("jRadioButton3");

        jRadioButton4.setText("jRadioButton4");

        jRadioButton5.setText("jRadioButton5");

        jRadioButton6.setText("jRadioButton6");

        jRadioButton7.setText("jRadioButton7");

        jRadioButton8.setText("jRadioButton8");

        jRadioButton9.setText("jRadioButton9");

        jRadioButton10.setText("jRadioButton10");

        jRadioButton11.setText("jRadioButton11");

        jRadioButton12.setText("jRadioButton12");

        jRadioButton13.setText("jRadioButton13");

        jRadioButton14.setText("jRadioButton14");

        jRadioButton15.setText("jRadioButton15");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectBarbarian)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton5)
                    .addComponent(jRadioButton6)
                    .addComponent(jRadioButton7)
                    .addComponent(jRadioButton8)
                    .addComponent(jRadioButton9)
                    .addComponent(jRadioButton10)
                    .addComponent(jRadioButton11)
                    .addComponent(jRadioButton12)
                    .addComponent(jRadioButton13)
                    .addComponent(jRadioButton14)
                    .addComponent(jRadioButton15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 353, Short.MAX_VALUE)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
                            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(selectBarbarian)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton15)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup classButtonGroup;
    private javax.swing.JRadioButton jRadioButton10;
    private javax.swing.JRadioButton jRadioButton11;
    private javax.swing.JRadioButton jRadioButton12;
    private javax.swing.JRadioButton jRadioButton13;
    private javax.swing.JRadioButton jRadioButton14;
    private javax.swing.JRadioButton jRadioButton15;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.Label label1;
    private javax.swing.JRadioButton selectBarbarian;
    // End of variables declaration//GEN-END:variables

    public void classDescriptor()
    {
        if (getClassChosen() == 0)
        {
            getjTextArea1().setText("Choose a class from the list on the left \n Select a class to get a description of each class, then select save at the bottom to choose your class.");
        }
        if(getClassChosen() == 1)
        {
            getjTextArea1().setText("Barbarian \n\n For some, there is only rage. In the ways of their people, in the fury of their passion, in the howl of battle, conflict is all these brutal souls know. Savages, hired muscle, masters of vicious martial techniques, they are not soldiers or professional warriorsâ€”they are the battle possessed, creatures of slaughter and spirits of war. Known as barbarians, these warmongers know little of training, preparation, or the rules of warfare; for them, only the moment exists, with the foes that stand before them and the knowledge that the next moment might hold their death. They possess a sixth sense in regard to danger and the endurance to weather all that might entail. These brutal warriors might rise from all walks of life, both civilized and savage, though whole societies embracing such philosophies roam the wild places of the world. Within barbarians storms the primal spirit of battle, and woe to those who face their rage.\n" +
                "\n" +
                "Role: Barbarians excel in combat, possessing the martial prowess and fortitude to take on foes seemingly far superior to themselves. With rage granting them boldness and daring beyond that of most other warriors, barbarians charge furiously into battle and ruin all who would stand in their way.\n" +
                "\n" +
                "Alignment: Any non-lawful\n" +
                "\n" +
                "Hit Die: d12");
        }
        if(getClassChosen() == 2)
        {
            getjTextArea1().setText(" Bard \n\n Untold wonders and secrets exist for those skillful enough to discover them. Through cleverness, talent, and magic, these cunning few unravel the wiles of the world, becoming adept in the arts of persuasion, manipulation, and inspiration. Typically masters of one or many forms of artistry, bards possess an uncanny ability to know more than they should and use what they learn to keep themselves and their allies ever one step ahead of danger. Bards are quick-witted and captivating, and their skills might lead them down many paths, be they gamblers or jacks-of-all-trades, scholars or performers, leaders or scoundrels, or even all of the above. For bards, every day brings its own opportunities, adventures, and challenges, and only by bucking the odds, knowing the most, and being the best might they claim the treasures of each.\n" +
                "\n" +
                "Role: Bards capably confuse and confound their foes while inspiring their allies to ever-greater daring. While accomplished with both weapons and magic, the true strength of bards lies outside melee, where they can support their companions and undermine their foes without fear of interruptions to their performances.\n" +
                "\n" +
                "Alignment: Any\n" +
                "\n" +
                "Hit Die: d8");
        }
        if(getClassChosen() == 3)
        {
            getjTextArea1().setText(" Cleric\n\n" +
                "In faith and the miracles of the divine, many find a greater purpose. Called to serve powers beyond most mortal understanding, all priests preach wonders and provide for the spiritual needs of their people. Clerics are more than mere priests, though; these emissaries of the divine work the will of their deities through strength of arms and the magic of their gods. Devoted to the tenets of the religions and philosophies that inspire them, these ecclesiastics quest to spread the knowledge and influence of their faith. Yet while they might share similar abilities, clerics prove as different from one another as the divinities they serve, with some offering healing and redemption, others judging law and truth, and still others spreading conflict and corruption. The ways of the cleric are varied, yet all who tread these paths walk with the mightiest of allies and bear the arms of the gods themselves.\n" +
                "\n" +
                "Role: More than capable of upholding the honor of their deities in battle, clerics often prove stalwart and capable combatants. Their true strength lies in their capability to draw upon the power of their deities, whether to increase their own and their allies' prowess in battle, to vex their foes with divine magic, or to lend healing to companions in need. As their powers are influenced by their faith, all clerics must focus their worship upon a divine source. While the vast majority of clerics revere a specific deity, a small number dedicate themselves to a divine concept worthy of devotionâ€”such as battle, death, justice, or knowledgeâ€”free of a deific abstraction. (Work with your GM if you prefer this path to selecting a specific deity.)\n" +
                "\n" +
                "Alignment: A cleric's alignment must be within one step of her deity's, along either the law/chaos axis or the good/evil axis.\n" +
                "\n" +
                "Hit Die: d8    ");
        }
        if(getClassChosen() == 4)
        {
            getjTextArea1().setText(" Druid\n\n" +
                "Within the purity of the elements and the order of the wilds lingers a power beyond the marvels of civilization. Furtive yet undeniable, these primal magics are guarded over by servants of philosophical balance known as druids. Allies to beasts and manipulators of nature, these often misunderstood protectors of the wild strive to shield their lands from all who would threaten them and prove the might of the wilds to those who lock themselves behind city walls. Rewarded for their devotion with incredible powers, druids gain unparalleled shape-shifting abilities, the companionship of mighty beasts, and the power to call upon nature's wrath. The mightiest temper powers akin to storms, earthquakes, and volcanoes with primeval wisdom long abandoned and forgotten by civilization.\n" +
                "\n" +
                "Role: While some druids might keep to the fringe of battle, allowing companions and summoned creatures to fight while they confound foes with the powers of nature, others transform into deadly beasts and savagely wade into combat. Druids worship personifications of elemental forces, natural powers, or nature itself. Typically this means devotion to a nature deity, though druids are just as likely to revere vague spirits, animalistic demigods, or even specific awe-inspiring natural wonders.\n" +
                "\n" +
                "Alignment: Any neutral\n" +
                "\n" +
                "Hit Die: d8    ");
        }
        if(getClassChosen() == 5)
        {
            getjTextArea1().setText(" Fighter\n\n"
                + "Some take up arms for glory, wealth, or revenge. Others do battle to prove themselves, to protect others, or because they know nothing else. Still others learn the ways of weaponcraft to hone their bodies in battle and prove their mettle in the forge of war. Lords of the battlefield, fighters are a disparate lot, training with many weapons or just one, perfecting the uses of armor, learning the fighting techniques of exotic masters, and studying the art of combat, all to shape themselves into living weapons. Far more than mere thugs, these skilled warriors reveal the true deadliness of their weapons, turning hunks of metal into arms capable of taming kingdoms, slaughtering monsters, and rousing the hearts of armies. Soldiers, knights, hunters, and artists of war, fighters are unparalleled champions, and woe to those who dare stand against them.\n" +
                "\n" +
                "Role: Fighters excel at combatâ€”defeating their enemies, controlling the flow of battle, and surviving such sorties themselves. While their specific weapons and methods grant them a wide variety of tactics, few can match fighters for sheer battle prowess.\n" +
                "\n" +
                "Alignment: Any.\n" +
                "\n" +
                "Hit Die: d10    ");
        }
        if(getClassChosen() == 6)
        {
            getjTextArea1().setText(" Monk\n\n"+
                "For the truly exemplary, martial skill transcends the battlefieldâ€”it is a lifestyle, a doctrine, a state of mind. These warrior-artists search out methods of battle beyond swords and shields, finding weapons within themselves just as capable of crippling or killing as any blade. These monks (so called since they adhere to ancient philosophies and strict martial disciplines) elevate their bodies to become weapons of war, from battle-minded ascetics to self-taught brawlers. Monks tread the path of discipline, and those with the will to endure that path discover within themselves not what they are, but what they are meant to be.\n" +
                "\n" +
                "Role: Monks excel at overcoming even the most daunting perils, striking where it's least expected, and taking advantage of enemy vulnerabilities. Fleet of foot and skilled in combat, monks can navigate any battlefield with ease, aiding allies wherever they are needed most.\n" +
                "\n" +
                "Alignment: Any lawful\n" +
                "\n" +
                "Hit Die: d8    ");
        }
        if(getClassChosen() == 7)
        {
            getjTextArea1().setText(" Paladin\n" + "\n" +
                "Through a select, worthy few shines the power of the divine. Called paladins, these noble souls dedicate their swords and lives to the battle against evil. Knights, crusaders, and law-bringers, paladins seek not just to spread divine justice but to embody the teachings of the virtuous deities they serve. In pursuit of their lofty goals, they adhere to ironclad laws of morality and discipline. As reward for their righteousness, these holy champions are blessed with boons to aid them in their quests: powers to banish evil, heal the innocent, and inspire the faithful. Although their convictions might lead them into conflict with the very souls they would save, paladins weather endless challenges of faith and dark temptations, risking their lives to do right and fighting to bring about a brighter future.\n" +
                "\n" +
                "Role: Paladins serve as beacons for their allies within the chaos of battle. While deadly opponents of evil, they can also empower goodly souls to aid in their crusades. Their magic and martial skills also make them well suited to defending others and blessing the fallen with the strength to continue fighting.\n" +
                "\n" +
                "Alignment: Lawful good\n" +
                "\n" +
                "Hit Die: d10    ");
        }
        if(getClassChosen() == 8)
        {
            getjTextArea1().setText(" Ranger\n\n" +
                "For those who relish the thrill of the hunt, there are only predators and prey. Be they scouts, trackers, or bounty hunters, rangers share much in common: unique mastery of specialized weapons, skill at stalking even the most elusive game, and the expertise to defeat a wide range of quarries. Knowledgeable, patient, and skilled hunters, these rangers hound man, beast, and monster alike, gaining insight into the way of the predator, skill in varied environments, and ever more lethal martial prowess. While some track man-eating creatures to protect the frontier, others pursue more cunning gameâ€”even fugitives among their own people.\n" +
                "\n" +
                "Role: Ranger are deft skirmishers, either in melee or at range, capable of skillfully dancing in and out of battle. Their abilities allow them to deal significant harm to specific types of foes, but their skills are valuable against all manner of enemies.\n" +
                "\n" +
                "Alignment: Any\n" +
                "\n" +
                "Hit Die: d10    ");
        }
        if(getClassChosen() == 9)
        {
            getjTextArea1().setText(" Rogue\n" +"\n" +
                "Life is an endless adventure for those who live by their wits. Ever just one step ahead of danger, rogues bank on their cunning, skill, and charm to bend fate to their favor. Never knowing what to expect, they prepare for everything, becoming masters of a wide variety of skills, training themselves to be adept manipulators, agile acrobats, shadowy stalkers, or masters of any of dozens of other professions or talents. Thieves and gamblers, fast talkers and diplomats, bandits and bounty hunters, and explorers and investigators all might be considered rogues, as well as countless other professions that rely upon wits, prowess, or luck. Although many rogues favor cities and the innumerable opportunities of civilization, some embrace lives on the road, journeying far, meeting exotic people, and facing fantastic danger in pursuit of equally fantastic riches. In the end, any who desire to shape their fates and live life on their own terms might come to be called rogues.\n" +
                "\n" +
                "Role: Rogues excel at moving about unseen and catching foes unaware, and tend to avoid head-to-head combat. Their varied skills and abilities allow them to be highly versatile, with great variations in expertise existing between different rogues. Most, however, excel in overcoming hindrances of all types, from unlocking doors and disarming traps to outwitting magical hazards and conning dull-witted opponents.\n" +
                "\n" +
                "Alignment: Any\n" +
                "\n" +
                "Hit Die: d8    ");
        }
        if(getClassChosen() == 10)
        {
            getjTextArea1().setText("  Sorcerer\n" +
                "\n" +
                "Scions of innately magical bloodlines, the chosen of deities, the spawn of monsters, pawns of fate and destiny, or simply flukes of fickle magic, sorcerers look within themselves for arcane prowess and draw forth might few mortals can imagine. Emboldened by lives ever threatening to be consumed by their innate powers, these magic-touched souls endlessly indulge in and refine their mysterious abilities, gradually learning how to harness their birthright and coax forth ever greater arcane feats. Just as varied as these innately powerful spellcasters' abilities and inspirations are the ways in which they choose to utilize their gifts. While some seek to control their abilities through meditation and discipline, becoming masters of their fantastic birthright, others give in to their magic, letting it rule their lives with often explosive results. Regardless, sorcerers live and breathe that which other spellcasters devote their lives to mastering, and for them magic is more than a boon or a field of study; it is life itself.\n" +
                "\n" +
                "Role: Sorcerers excel at casting a selection of favored spells frequently, making them powerful battle mages. As they become familiar with a specific and ever-widening set of spells, sorcerers often discover new and versatile ways of making use of magics other spellcasters might overlook. Their bloodlines also grant them additional abilities, assuring that no two sorcerers are ever quite alike.\n" +
                "\n" +
                "Alignment: Any\n" +
                "\n" +
                "Hit Die: d6   ");
        }
        if(getClassChosen() == 11)
        {
            getjTextArea1().setText(" Wizard\n" +
                "\n" +
                "Beyond the veil of the mundane hide the secrets of absolute power. The works of beings beyond mortals, the legends of realms where gods and spirits tread, the lore of creations both wondrous and terribleâ€”such mysteries call to those with the ambition and the intellect to rise above the common folk to grasp true might. Such is the path of the wizard. These shrewd magic-users seek, collect, and covet esoteric knowledge, drawing on cultic arts to work wonders beyond the abilities of mere mortals. While some might choose a particular field of magical study and become masters of such powers, others embrace versatility, reveling in the unbounded wonders of all magic. In either case, wizards prove a cunning and potent lot, capable of smiting their foes, empowering their allies, and shaping the world to their every desire.\n" +
                "\n" +
                "Role: While universalist wizards might study to prepare themselves for any manner of danger, specialist wizards research schools of magic that make them exceptionally skilled within a specific focus. Yet no matter their specialty, all wizards are masters of the impossible and can aid their allies in overcoming any danger.\n" +
                "\n" +
                "Alignment: Any\n" +
                "\n" +
                "Hit Die: d6    ");
        }
        if(getClassChosen() == 12)
        {
            getjTextArea1().setText("Alchemist    ");
        }
        if(getClassChosen() == 13)
        {
            getjTextArea1().setText("Cavalier   ");
        }
        if(getClassChosen() == 14)
        {
            getjTextArea1().setText("Gunslinger   ");
        }
        if(getClassChosen() == 15)
        {
            getjTextArea1().setText("Inquisitor   ");
        }
        if(getClassChosen() == 16)
        {
            getjTextArea1().setText("Magus    ");
        }
        if(getClassChosen() == 17)
        {
            getjTextArea1().setText("Oracle    ");
        }
        if(getClassChosen() == 18)
        {
            getjTextArea1().setText("Summoner    ");
        }
        if(getClassChosen() == 19)
        {
            getjTextArea1().setText("Witch    ");
        }
    }
    
    
    /**
     * @return the jTextArea1
     */
    public javax.swing.JTextArea getjTextArea1() {
        return jTextArea1;
    }

    /**
     * @param jTextArea1 the jTextArea1 to set
     */
    public void setjTextArea1(javax.swing.JTextArea jTextArea1) {
        this.jTextArea1 = jTextArea1;
    }

    public int getClassChosen() {
        return classChosen;
    }

    public void setClassChosen(int classChosen) {
        this.classChosen = classChosen;
    }

    public javax.swing.ButtonGroup getButtonGroup1() {
        return classButtonGroup;
    }

    public void setButtonGroup1(javax.swing.ButtonGroup buttonGroup1) {
        this.classButtonGroup = buttonGroup1;
    }

    public javax.swing.JRadioButton getSelectBarbarian() {
        return selectBarbarian;
    }

    public void setSelectBarbarian(javax.swing.JRadioButton selectBarbarian) {
        this.selectBarbarian = selectBarbarian;
    }

    public javax.swing.JRadioButton getjRadioButton10() {
        return jRadioButton10;
    }

    public void setjRadioButton10(javax.swing.JRadioButton jRadioButton10) {
        this.jRadioButton10 = jRadioButton10;
    }

    public javax.swing.JRadioButton getjRadioButton11() {
        return jRadioButton11;
    }

    public void setjRadioButton11(javax.swing.JRadioButton jRadioButton11) {
        this.jRadioButton11 = jRadioButton11;
    }

    public javax.swing.JRadioButton getjRadioButton12() {
        return jRadioButton12;
    }

    public void setjRadioButton12(javax.swing.JRadioButton jRadioButton12) {
        this.jRadioButton12 = jRadioButton12;
    }

    public javax.swing.JRadioButton getjRadioButton13() {
        return jRadioButton13;
    }

    public void setjRadioButton13(javax.swing.JRadioButton jRadioButton13) {
        this.jRadioButton13 = jRadioButton13;
    }

    public javax.swing.JRadioButton getjRadioButton14() {
        return jRadioButton14;
    }

    public void setjRadioButton14(javax.swing.JRadioButton jRadioButton14) {
        this.jRadioButton14 = jRadioButton14;
    }

    public javax.swing.JRadioButton getjRadioButton15() {
        return jRadioButton15;
    }

    public void setjRadioButton15(javax.swing.JRadioButton jRadioButton15) {
        this.jRadioButton15 = jRadioButton15;
    }

    public javax.swing.JRadioButton getjRadioButton2() {
        return jRadioButton2;
    }

    public void setjRadioButton2(javax.swing.JRadioButton jRadioButton2) {
        this.jRadioButton2 = jRadioButton2;
    }

    public javax.swing.JRadioButton getjRadioButton3() {
        return jRadioButton3;
    }

    public void setjRadioButton3(javax.swing.JRadioButton jRadioButton3) {
        this.jRadioButton3 = jRadioButton3;
    }

    public javax.swing.JRadioButton getjRadioButton4() {
        return jRadioButton4;
    }

    public void setjRadioButton4(javax.swing.JRadioButton jRadioButton4) {
        this.jRadioButton4 = jRadioButton4;
    }

    public javax.swing.JRadioButton getjRadioButton5() {
        return jRadioButton5;
    }

    public void setjRadioButton5(javax.swing.JRadioButton jRadioButton5) {
        this.jRadioButton5 = jRadioButton5;
    }

    public javax.swing.JRadioButton getjRadioButton6() {
        return jRadioButton6;
    }

    public void setjRadioButton6(javax.swing.JRadioButton jRadioButton6) {
        this.jRadioButton6 = jRadioButton6;
    }

    public javax.swing.JRadioButton getjRadioButton7() {
        return jRadioButton7;
    }

    public void setjRadioButton7(javax.swing.JRadioButton jRadioButton7) {
        this.jRadioButton7 = jRadioButton7;
    }

    public javax.swing.JRadioButton getjRadioButton8() {
        return jRadioButton8;
    }

    public void setjRadioButton8(javax.swing.JRadioButton jRadioButton8) {
        this.jRadioButton8 = jRadioButton8;
    }

    public javax.swing.JRadioButton getjRadioButton9() {
        return jRadioButton9;
    }

    public void setjRadioButton9(javax.swing.JRadioButton jRadioButton9) {
        this.jRadioButton9 = jRadioButton9;
    }

    public javax.swing.JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(javax.swing.JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public java.awt.Label getLabel1() {
        return label1;
    }

    public void setLabel1(java.awt.Label label1) {
        this.label1 = label1;
    }


}
